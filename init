#!/bin/bash

# This is the example configuration file for river.
#
# If you wish to edit this, you will probably want to copy it to
# $XDG_CONFIG_HOME/river/init or $HOME/.config/river/init first.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.
#
# TIP: To be on the safe side when changes here ar mode use ./init. mod+ctrt r may not work as expected sometimes.

# Note: the "Super" modifier is also known as Logo, GUI, Windows, Mod4, etc.

mod="Mod4"
ctrl="Control"

# Don't work on the bottom IDKY
riverctl spawn "killall waybar; waybar"
riverctl spawn "$HOME/bin/wayland.sh"
riverctl spawn "swaybg -i ~/Pictures/wallpapers/void.png"
#
# Super+Shift+Return to start an instance of foot (https://codeberg.org/dnkl/foot)
# riverctl map normal Super+Shift Return spawn foot
riverctl map normal $mod Return spawn kitty
riverctl map normal $mod e spawn "emacsclient -c -a emacs -s my-emacs-client"
riverctl map normal $mod b spawn firefox
# riverctl map normal $mod b spawn google-chrome-stable
riverctl map normal $mod p spawn "dmenu_run -nf '#839496' -nb '#eee8d5' -sb '#2aa198' -sf '#fdf6e3' -fn 'UbuntuMono Nerd Font:size=22:antialias=true:autohint=true'"
riverctl map normal $mod x spawn 'xpad'

# riverctl map normal Super Return spawn alacritty

riverctl map normal Super c close
riverctl map normal $mod+$ctrl r spawn "$HOME/.config/river/init"
#riverctl map normal $mod+$ctrl l "/usr/bin/swaylock"
riverctl map normal $mod+$ctrl l spawn "/usr/bin/swaylock -i /home/ritchie/Pictures/wallpapers/void.png"

# Super+Shift+E to exit river
riverctl map normal $mod+Shift Q exit

# Super+J and Super+K to focus the next/previous view in the layout stack
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous

# Super+Shift+J and Super+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Return to bump the focused view to the top of the layout stack
# riverctl map normal Super Return zoom

# Super+H and Super+L to decrease/increase the main ratio of rivertile(1)
riverctl map normal Super L send-layout-cmd rivercarro "main-ratio -0.05"
riverctl map normal Super H send-layout-cmd rivercarro "main-ratio +0.05"

# Super+Shift+H and Super+Shift+L to increment/decrement the main count of rivertile(1)
riverctl map normal Super+Shift H send-layout-cmd rivercarro "main-count +1"
riverctl map normal Super+Shift L send-layout-cmd rivercarro "main-count -1"

# Zoom - promote to master.
riverctl map normal $mod r zoom

# Super+Alt+{H,J,K,L} to move views
riverctl map normal Super+Alt H move left 100
riverctl map normal Super+Alt J move down 100
riverctl map normal Super+Alt K move up 100
riverctl map normal Super+Alt L move right 100

# Super+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal Super+Alt+Control H snap left
riverctl map normal Super+Alt+Control J snap down
riverctl map normal Super+Alt+Control K snap up
riverctl map normal Super+Alt+Control L snap right

# Super+Alt+Shift+{H,J,K,L} to resize views
riverctl map normal Super+Alt+Shift H resize horizontal -100
riverctl map normal Super+Alt+Shift J resize vertical 100
riverctl map normal Super+Alt+Shift K resize vertical -100
riverctl map normal Super+Alt+Shift L resize horizontal 100

# Super + Left Mouse Button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Super + Right Mouse Button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

# Super + Middle Mouse Button to toggle float
riverctl map-pointer normal Super BTN_MIDDLE toggle-float

# I think always means if you move a window to the next montor and you focus it with the mouse it will follow.
riverctl focus-follows-cursor always
#[================================== TAGS ==================================]
tag=(d f m o v)
for i in $(seq 1 5)
do
    tags=$((1 << ($i - 1)))
    l=${tag[i-1]}
	# echo "tags are $tags letter is $l"
    # Focus on tag
    riverctl map normal $mod $i set-focused-tags $tags
    riverctl map normal $mod $l set-focused-tags $tags

    # Move focused to view
    riverctl map normal $mod+Control $i set-view-tags $tags
    riverctl map normal $mod+Control $l set-view-tags $tags

    # Show $tag in current view
    # riverctl map normal $mod+Control $i toggle-focused-tags $tags

    # Shows focused in $tag, prob better to do a mode.
    riverctl map normal $mod+Shift+Control $i toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal Super 0 set-focused-tags $all_tags
riverctl map normal Super+Shift 0 set-view-tags $all_tags
riverctl map normal Super a set-focused-tags $all_tags
riverctl map normal $mod+Shift a set-view-tags $all_tags

# Super+Space to toggle float
# riverctl map normal Super Space toggle-float
riverctl map normal $mod+Shift Space toggle-float

# Super+F to toggle fullscreen
# riverctl map normal Super F toggle-fullscreen
riverctl map normal $mod+Shift F toggle-fullscreen

# Super+{Up,Right,Down,Left} to change layout orientation
riverctl map normal Super Up    send-layout-cmd rivercarro "main-location top"
riverctl map normal Super Right send-layout-cmd rivercarro "main-location right"
riverctl map normal Super Down  send-layout-cmd rivercarro "main-location bottom"
riverctl map normal Super Left  send-layout-cmd rivercarro "main-location left"
riverctl map normal $mod  Tab    send-layout-cmd rivercarro "main-location right"

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Super+F11 to enter passthrough mode
riverctl map normal Super F11 enter-mode passthrough

# Super+F11 to return to normal mode
riverctl map passthrough Super F11 enter-mode normal

#[=============================== MEDIA KEYS ===============================]


# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked
do
    # Eject the optical drive (well if you still have one that is)
    riverctl map $mode None XF86Eject spawn 'eject -T'

    # Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
	riverctl map $mode None XF86AudioRaiseVolume spawn "vol up"
	riverctl map $mode None XF86AudioLowerVolume spawn "vol down"
    riverctl map $mode None XF86AudioMute        spawn 'vol mute'

    # Control MPRIS aware media players with playerctl (https://github.com/altdesktop/playerctl)
    riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPlay  spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPrev  spawn 'playerctl previous'
    riverctl map $mode None XF86AudioNext  spawn 'playerctl next'

	riverctl map $mode None XF86MonBrightnessDown spawn "brightnessctl -q s 1%-"
	riverctl map $mode None XF86MonBrightnessUp spawn "brightnessctl -q s +1%"

done

# Set background and border color
riverctl background-color 0x002b36
# riverctl border-color-focused 0x93a1a1
riverctl border-color-focused 0xFF00FF
riverctl border-color-unfocused 0x586e75

# Set keyboard repeat rate
riverctl set-repeat 50 300

#FIXME: Bug here
# Make all views with an app-id that starts with "float" and title "foo" start floating.
# riverctl rule-add float -app-id 'float*' -title 'foo'
riverctl rule-add float -app-id "xpad"

# Make all views with app-id "bar" and any title use client-side decorations
# riverctl rule-add csd -app-id "xpad"

riverctl map normal $mod Space send-layout-cmd rivercarro "main-location monocle"

#[================================ Touchpad ================================]
for pad in $(riverctl list-inputs | grep -i touchpad); do
  riverctl input "$pad" events enabled
 # Scroll speed? TODO: not sure what it's on river contorl
  # riverctl input "$pad" scroll_factor 0.5
  riverctl input "$pad" natural-scroll disabled
  riverctl input "$pad" accel-profile adaptive
  riverctl input "$pad" pointer-accel 0.25
  riverctl input "$pad" disable-while-typing enabled
  riverctl input "$pad" tap enabled
  riverctl input "$pad" scroll-method two-finger
  #riverctl input "$pad" accel-profile adaptive
  #riverctl input "$pad" clickfinger
  #riverctl input "$pad" drag enabled
  #riverctl input "$pad" drag-lock disabled
  #riverctl input "$pad" events disabled-on-external-mouse enabled
  #riverctl input "$pad" middle-emulation enabled
  #riverctl input "$pad" tap-button-map left-right-middle
done

#[================================ SCRATCH =================================]

#scratchpad
# TODO: How to use scratch on both monitors and focus the window in teh scratch?
 #https://github.com/riverwm/river/issues/782
scratch_tag=$((1 << 20 ))
riverctl map normal $mod s toggle-focused-tags ${scratch_tag}
riverctl map normal $mod+Control s set-view-tags ${scratch_tag}
all_but_scratch_tag=$(( ((1 << 32) - 1) ^ $scratch_tag ))
riverctl spawn-tagmask ${all_but_scratch_tag}

riverctl map normal $mod 9 toggle-focused-tags ${scratch_tag}

#[================================ MONITORS ================================]
# riverctl map normal Super Period focus-output next
# riverctl map normal Super Comma focus-output previous
riverctl map normal $mod Semicolon focus-output next

# Without -current-tags it would send it to the next monitor with the tag it had.
riverctl map normal $mod+Control Semicolon send-to-output -current-tags next
# riverctl map normal Super+Shift Comma send-to-output previous
# riverctl map normal $mod w spawn "wlopm --toggle eDP-1;wlopm --toggle DP-2"
riverctl map normal $mod w spawn "wlopm --toggle '*'"


# NS saw it in a config
riverctl spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river"


# Super + Left Mouse Button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Super + Right Mouse Button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

# rivercarro or rivertile need to be called at the end or the commands won't execute. See https://github.com/riverwm/river/issues/680
# Set the default layout generator to be rivertile and start it.
# River will send the process group of the init executable SIGTERM on exit.
# riverctl default-layout rivertile
riverctl default-layout rivercarro
# rivertile -main-location right -view-padding 6 -outer-padding 6 &
# FIXME: rivercarro did not build properly: => ERROR: my-rivercarro-0.2.1_1: non-PIE executable found in PIE build: /usr/bin/rivercarro
rivercarro -main-location right
